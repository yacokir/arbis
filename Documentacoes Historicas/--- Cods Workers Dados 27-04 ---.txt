Codigos dos workers de dados desenvolvidos ate agora 27/04/2025 16:00. 
CODIGO BINANCE:
const { parentPort, workerData } = require('worker_threads');
const WebSocket = require('ws');

const { codigosDePar } = workerData;
const constSeparadorParaFormarPar = "";
const par = codigosDePar[0] + constSeparadorParaFormarPar + codigosDePar[1];

const binanceWsUrl = 'wss://stream.binance.com:9443/ws';

function formatTime(date) {
  return date.toISOString().replace('T', ' ').slice(0, 19) + '.' + String(date.getMilliseconds()).padStart(3, '0');
}

function connectBinanceWebSocket() {
  const ws = new WebSocket(binanceWsUrl);

  ws.on('open', () => {
    console.log(`[Worker Binance] Conectado ao WebSocket para ${par} às ${formatTime(new Date())}`);
    ws.send(JSON.stringify({
      method: 'SUBSCRIBE',
      params: [`${par.toLowerCase()}@bookTicker`],
      id: 1
    }));
  });

  ws.on('ping', () => {
    // Removido o console.log para pings nativos
  });

  let lastBid = null;
  let lastBidAmount = null;
  let lastAsk = null;
  let lastAskAmount = null;

  ws.on('message', (msg) => {
    try {
      const data = JSON.parse(msg);
      if (data.s && data.b && data.a) {
        const bidPrice = data.b || null;
        const bidAmount = data.B || null;
        const askPrice = data.a || null;
        const askAmount = data.A || null;
        const currentTime = formatTime(new Date());

        if (bidPrice && (bidPrice !== lastBid || bidAmount !== lastBidAmount)) {
          parentPort.postMessage({ 
            exchange: 'Binance', 
            par, 
            bid: bidPrice, 
            bidAmount: bidAmount, 
            bidTime: currentTime 
          });
          lastBid = bidPrice;
          lastBidAmount = bidAmount;
        }
        if (askPrice && (askPrice !== lastAsk || askAmount !== lastAskAmount)) {
          parentPort.postMessage({ 
            exchange: 'Binance', 
            par, 
            ask: askPrice, 
            askAmount: askAmount, 
            askTime: currentTime 
          });
          lastAsk = askPrice;
          lastAskAmount = askAmount;
        }
      }
    } catch (err) {
      console.error(`[Worker Binance] Erro ao processar dados para ${par} às ${formatTime(new Date())}:`, err);
    }
  });

  ws.on('error', (err) => {
    console.error(`[Worker Binance] Erro no WebSocket para ${par} às ${formatTime(new Date())}:`, err);
  });

  ws.on('close', (code, reason) => {
    console.log(`[Worker Binance] WebSocket desconectado para ${par} às ${formatTime(new Date())}. Código: ${code}, Motivo: ${reason || 'Nenhum motivo fornecido'}. Tentando reconectar...`);
    setTimeout(connectBinanceWebSocket, 1000);
  });
}

connectBinanceWebSocket();



este é o codigo do coordenador

CODIGO BYBIT

const { parentPort, workerData } = require('worker_threads');
const WebSocket = require('ws');

const { codigosDePar } = workerData;
const constSeparadorParaFormarPar = "";
const par = codigosDePar[0] + constSeparadorParaFormarPar + codigosDePar[1];

const bybitWsUrl = 'wss://stream.bybit.com/v5/public/spot';
const pingInterval = 20000;

function formatTime(date) {
  return date.toISOString().replace('T', ' ').slice(0, 19) + '.' + String(date.getMilliseconds()).padStart(3, '0');
}

function connectBybitWebSocket() {
  const ws = new WebSocket(bybitWsUrl);

  ws.on('open', () => {
    console.log(`[Worker Bybit] Conectado ao WebSocket para ${par}`);
    ws.send(JSON.stringify({
      op: 'subscribe',
      args: [`orderbook.1.${par}`],
    }));

    setInterval(() => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({ op: 'ping' }));
      }
    }, pingInterval);
  });

  let lastBid = null;
  let lastBidAmount = null;
  let lastAsk = null;
  let lastAskAmount = null;

  ws.on('message', (msg) => {
    try {
      const data = JSON.parse(msg);
      const bid = data.data?.b?.[0] || null;
      const ask = data.data?.a?.[0] || null;
      const currentTime = formatTime(new Date());

      if (bid || ask) {
        const bidPrice = bid ? bid[0] : null;
        const bidAmount = bid ? bid[1] : null;
        const askPrice = ask ? ask[0] : null;
        const askAmount = ask ? ask[1] : null;

        if (bidPrice && (bidPrice !== lastBid || bidAmount !== lastBidAmount)) {
          parentPort.postMessage({ 
            exchange: 'Bybit', 
            par, 
            bid: bidPrice, 
            bidAmount: bidAmount, 
            bidTime: currentTime 
          });
          lastBid = bidPrice;
          lastBidAmount = bidAmount;
        }

        if (askPrice && (askPrice !== lastAsk || askAmount !== lastAskAmount)) {
          parentPort.postMessage({ 
            exchange: 'Bybit', 
            par, 
            ask: askPrice, 
            askAmount: askAmount, 
            askTime: currentTime 
          });
          lastAsk = askPrice;
          lastAskAmount = askAmount;
        }
      }
    } catch (err) {
      console.error(`[Worker Bybit] Erro ao processar dados para ${par}:`, err);
    }
  });

  ws.on('error', (err) => console.error(`[Worker Bybit] Erro no WebSocket para ${par}:`, err));
  ws.on('close', () => {
    console.log(`[Worker Bybit] WebSocket desconectado para ${par}. Tentando reconectar...`);
    clearInterval(pingInterval);
    setTimeout(connectBybitWebSocket, 5000);
  });
}

connectBybitWebSocket();

CODIGO BITPRECO
const { Socket } = require('phoenix-channels');
const { parentPort, workerData } = require('worker_threads');

const { codigosDePar } = workerData;
const par = codigosDePar[0] + "-" + codigosDePar[1];
const parFormatado = codigosDePar[0] + codigosDePar[1];
const SOCKET_URL = 'wss://websocket.bitpreco.com';

function formatTime(utimestamp) {
  // O utimestamp vem como "2025-02-27 13:14:33.672618"
  // Pega até os milissegundos (ignora microsegundos)
  const [datePart, timePart] = utimestamp.split(' ');
  const [seconds, millis] = timePart.split('.');
  const millisFormatted = millis.slice(0, 3).padStart(3, '0');
  return `${datePart} ${seconds}.${millisFormatted}`;
}

function connectBitprecoSocket() {
  const socket = new Socket(`${SOCKET_URL}/orderbook/socket`, { timeout: 60000 }); // Timeout de 60s pra maior estabilidade

  socket.onOpen(() => {
    console.log(`[Worker bitpreco] Conexão WebSocket estabelecida às ${new Date().toISOString()}`);
  });

  socket.connect();

  const channel = socket.channel(`orderbook:${par}`, {});

  channel.join()
    .receive('ok', () => console.log(`[Worker bitpreco] Conectado ao tópico orderbook:${par} às ${new Date().toISOString()}`))
    .receive('error', () => {
      console.error(`[Worker bitpreco] Erro ao conectar ao tópico ${par} às ${new Date().toISOString()}. Par não suportado?`);
      process.exit(1);
    });

  let lastBidPrice = null;
  let lastBidAmount = null;
  let lastAskPrice = null;
  let lastAskAmount = null;

  channel.on('snapshot', (payload) => processOrderbookUpdate(payload));
  channel.on('update', (payload) => processOrderbookUpdate(payload));

  function processOrderbookUpdate(payload) {
    const bestBid = payload.bids && payload.bids[0];
    const bestAsk = payload.asks && payload.asks[0];
    const currentTime = formatTime(payload.utimestamp); // Usa o utimestamp do payload

    if (bestBid && bestAsk) {
      const bidPrice = bestBid.price;
      const bidAmount = bestBid.amount;
      const askPrice = bestAsk.price;
      const askAmount = bestAsk.amount;

      if (bidPrice !== lastBidPrice || bidAmount !== lastBidAmount) {
        parentPort.postMessage({ 
          exchange: 'bitpreco', 
          par: parFormatado, 
          bid: bidPrice, 
          bidAmount: bidAmount, 
          bidTime: currentTime 
        });
        lastBidPrice = bidPrice;
        lastBidAmount = bidAmount;
      }
      if (askPrice !== lastAskPrice || askAmount !== lastAskAmount) {
        parentPort.postMessage({ 
          exchange: 'bitpreco', 
          par: parFormatado, 
          ask: askPrice, 
          askAmount: askAmount, 
          askTime: currentTime 
        });
        lastAskPrice = askPrice;
        lastAskAmount = askAmount;
      }
    }
  }

  socket.onClose(() => {
    console.log(`[Worker bitpreco] WebSocket desconectado para ${par} às ${new Date().toISOString()}. Tentando reconectar...`);
    setTimeout(connectBitprecoSocket, 1000); // Reconecta em 1 segundo
  });

  socket.onError((error) => console.error(`[Worker bitpreco] Erro no WebSocket para ${par} às ${new Date().toISOString()}:`, error));
}

connectBitprecoSocket();

CODIGO DERIBIT
const { parentPort, workerData } = require('worker_threads');
const WebSocket = require('ws');

const { codigosDePar } = workerData;
const constSeparadorParaFormarPar = "_";
const par = codigosDePar[0] + constSeparadorParaFormarPar + codigosDePar[1];
const parFormatado = codigosDePar[0] + codigosDePar[1];

const deribitWsUrl = 'wss://www.deribit.com/ws/api/v2';

function formatTime(date) {
  return date.toISOString().replace('T', ' ').slice(0, 19) + '.' + String(date.getMilliseconds()).padStart(3, '0');
}

function connectDeribitWebSocket() {
  const ws = new WebSocket(deribitWsUrl);

  ws.on('open', () => {
    console.log(`[Worker Deribit] Conectado ao WebSocket para ${par}`);
    const subscribeMessage = {
      jsonrpc: '2.0',
      method: 'public/subscribe',
      params: { channels: [`book.${par}.none.10.100ms`] },
      id: 1,
    };
    ws.send(JSON.stringify(subscribeMessage));
  });

  let lastBid = null;
  let lastBidAmount = null;
  let lastAsk = null;
  let lastAskAmount = null;

  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data);
      if (message.result && Array.isArray(message.result)) {
        console.log(`[Worker Deribit] Inscrição confirmada para ${par}`);
        return;
      }

      if (message.params && message.params.channel === `book.${par}.none.10.100ms`) {
        const orderBook = message.params.data;
        const bid = orderBook.bids.length > 0 ? orderBook.bids[0][0] : null;
        const bidAmount = orderBook.bids.length > 0 ? orderBook.bids[0][1] : null;
        const ask = orderBook.asks.length > 0 ? orderBook.asks[0][0] : null;
        const askAmount = orderBook.asks.length > 0 ? orderBook.asks[0][1] : null;
        const currentTime = formatTime(new Date());

        if (bid !== null && (bid !== lastBid || bidAmount !== lastBidAmount)) {
          parentPort.postMessage({ exchange: 'Deribit', par: parFormatado, bid, bidAmount, bidTime: currentTime });
          lastBid = bid;
          lastBidAmount = bidAmount;
        }
        if (ask !== null && (ask !== lastAsk || askAmount !== lastAskAmount)) {
          parentPort.postMessage({ exchange: 'Deribit', par: parFormatado, ask, askAmount, askTime: currentTime });
          lastAsk = ask;
          lastAskAmount = askAmount;
        }
      }
    } catch (err) {
      console.error(`[Worker Deribit] Erro ao processar dados para ${par}:`, err);
      process.exit(1); // Sai se o par não for suportado ou houver erro grave
    }
  });

  ws.on('error', (err) => console.error(`[Worker Deribit] Erro no WebSocket para ${par}:`, err));
  ws.on('close', () => {
    console.log(`[Worker Deribit] WebSocket desconectado para ${par}. Tentando reconectar...`);
    setTimeout(connectDeribitWebSocket, 5000);
  });
}

connectDeribitWebSocket();

CODIGO OKX
const { parentPort, workerData } = require('worker_threads');
const WebSocket = require('ws');

const { codigosDePar } = workerData;
const constSeparadorParaFormarPar = "-";
const par = codigosDePar[0] + constSeparadorParaFormarPar + codigosDePar[1];

const okxWsUrl = 'wss://ws.okx.com:8443/ws/v5/public';
const pingInterval = 20000;

function formatTime(ts) {
  const date = new Date(parseInt(ts));
  return date.toISOString().replace('T', ' ').slice(0, 19) + '.' + String(date.getMilliseconds()).padStart(3, '0');
}

function connectOKXWebSocket() {
  const ws = new WebSocket(okxWsUrl);

  ws.on('open', () => {
    console.log(`[Worker OKX] Conectado ao WebSocket para ${par}`);
    ws.send(JSON.stringify({
      op: 'subscribe',
      args: [{ channel: 'bbo-tbt', instId: par }]
    }));

    setInterval(() => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({ op: 'ping' }));
      }
    }, pingInterval);
  });

  let lastBid = null;
  let lastBidAmount = null;
  let lastAsk = null;
  let lastAskAmount = null;

  ws.on('message', (msg) => {
    try {
      const data = JSON.parse(msg);
      if (data.data && data.data[0]) {
        const bidPrice = data.data[0].bids && data.data[0].bids[0] ? data.data[0].bids[0][0] : null;
        const bidAmount = data.data[0].bids && data.data[0].bids[0] ? data.data[0].bids[0][1] : null;
        const askPrice = data.data[0].asks && data.data[0].asks[0] ? data.data[0].asks[0][0] : null;
        const askAmount = data.data[0].asks && data.data[0].asks[0] ? data.data[0].asks[0][1] : null;
        const currentTime = formatTime(data.data[0].ts);

        if (bidPrice && (bidPrice !== lastBid || bidAmount !== lastBidAmount)) {
          parentPort.postMessage({ 
            exchange: 'OKX', 
            par: codigosDePar[0] + codigosDePar[1], 
            bid: bidPrice, 
            bidAmount: bidAmount, 
            bidTime: currentTime 
          });
          lastBid = bidPrice;
          lastBidAmount = bidAmount;
        }
        if (askPrice && (askPrice !== lastAsk || askAmount !== lastAskAmount)) {
          parentPort.postMessage({ 
            exchange: 'OKX', 
            par: codigosDePar[0] + codigosDePar[1], 
            ask: askPrice, 
            askAmount: askAmount, 
            askTime: currentTime 
          });
          lastAsk = askPrice;
          lastAskAmount = askAmount;
        }
      }
    } catch (err) {
      console.error(`[Worker OKX] Erro ao processar dados para ${par}:`, err);
    }
  });

  ws.on('error', (err) => console.error(`[Worker OKX] Erro no WebSocket para ${par}:`, err));
  ws.on('close', () => {
    console.log(`[Worker OKX] WebSocket desconectado para ${par}. Tentando reconectar...`);
    clearInterval(pingInterval);
    setTimeout(connectOKXWebSocket, 5000);
  });
}

connectOKXWebSocket();



