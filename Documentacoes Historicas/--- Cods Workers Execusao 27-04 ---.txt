Codigos dos workers de execusao desenvolvidos ate agora 27/04/2025 16:00. 
CODIGO BINANCE:
"use strict";
const { parentPort, workerData } = require('worker_threads');
const WebSocket = require('ws');
const crypto = require('crypto');

// Cores ANSI para logs
const GREEN = '\x1b[32m';
const BROWN = '\x1b[33m';
const RESET = '\x1b[0m';

// Credenciais da Binance
const { apiKey, apiSecret } = workerData;

// Validação das credenciais
if (!apiKey || !apiSecret) {
  console.error('[workerExecBinance] Erro: Credenciais incompletas no workerData:', workerData);
  throw new Error('Credenciais da Binance não fornecidas corretamente');
}

// Função para formatar objetos nos logs
function formatObject(obj) {
  return JSON.stringify(obj, null, 2)
    .replace(/"([^"]+)": "([^"]+)"/g, `"$1": ${GREEN}"$2"${RESET}`)
    .replace(/"([^"]+)": (\d+(.\d+)?)/g, `"$1": ${BROWN}$2${RESET}`)
    .replace(/"([^"]+)": null/g, `"$1": null`);
}

// Função para assinar a mensagem com Ed25519
async function signMessage(message) {
  const secretBuffer = Buffer.from(apiSecret, 'base64');
  const key = await crypto.subtle.importKey(
    'pkcs8',
    secretBuffer,
    { name: 'Ed25519' },
    false,
    ['sign']
  );
  const encoder = new TextEncoder();
  const signature = await crypto.subtle.sign(
    { name: 'Ed25519' },
    key,
    encoder.encode(message)
  );
  return Buffer.from(signature).toString('base64');
}

// Função de log com timestamps
let t0;
function logMessage(channel, message) {
  const abs = Date.now();
  const t = t0 ? abs - t0 : 0;
  console.log(`[workerExecBinance - ${channel}] [abs=${abs} t=${t}] ${message}`);
}

let ws;
let portToCoord;

// Mapeamento da ordem para o formato da Binance
function mapOrderToBinance(order) {
  const orderParams = {
    symbol: order.symbol,
    side: order.side.toUpperCase(),
    type: order.type.toUpperCase(),
    quantity: order.amount
  };
  if (order.type.toLowerCase() !== 'market' && order.price != null) {
    orderParams.price = order.price;
  }
  if (order.type.toLowerCase() === 'market') {
    if (order.timeInForce != null) {
      orderParams.timeInForce = order.timeInForce;
    }
  } else {
    orderParams.timeInForce = order.timeInForce != null ? order.timeInForce : 'GTC';
  }
  return orderParams;
}

// Conecta ao WebSocket da Binance
async function connectBinanceWebSocket() {
  ws = new WebSocket('wss://ws-api.binance.com:443/ws-api/v3');

  ws.on('open', async () => {
    logMessage('Conexão', 'Conectado ao WebSocket trade API da Binance.');
    const timestamp = Date.now();
    const params = `apiKey=${apiKey}&timestamp=${timestamp}`;
    const signature = await signMessage(params);

    const authRequest = {
      id: 1,
      method: 'session.logon',
      params: {
        apiKey: apiKey,
        timestamp: timestamp,
        signature: signature
      }
    };

    ws.send(JSON.stringify(authRequest));
  });

  ws.on('ping', (data) => {
    logMessage('Conexão', `Recebido ping do servidor: ${data}`);
    ws.pong(data);
    logMessage('Conexão', `Enviado pong para o servidor: ${data}`);
  });

  ws.on('pong', (data) => {
    // logMessage('Conexão', `Recebido pong do servidor: ${data}`);
    if (!portToCoord.sentConexoesProntas) {
      portToCoord.sentConexoesProntas = true;
      portToCoord.postMessage({ type: 'conexoesProntas' });
    // logMessage('Conexão', 'Conexão confirmada, enviando conexoesProntas ao coordenador.');
    }
  });

  ws.on('message', (data) => {
    //logMessage('WebSocket', `Mensagem bruta recebida: ${data}`);
    let msg;
    try {
      msg = JSON.parse(data);
      // logMessage('Geral', `Mensagem parseada:\n${formatObject(msg)}`);
      logMessage('Geral', `Resultado Conexao: ${msg.status}`);
    } catch (e) {
      logMessage('Erro', `Erro ao parsear mensagem: ${e.message}`);
      portToCoord.postMessage({ type: 'error', message: `Erro ao parsear mensagem: ${e.message}` });
      return;
    }

    if (msg.id === 1 && msg.status === 200) {
      // logMessage('Conexão', 'Autenticado com sucesso.');
      ws.ping('initial-ping');
      // logMessage('Conexão', 'Enviado ping inicial: initial-ping');
    }

    if (msg.id === 2) {
      const abs = Date.now();
      const t = t0 ? abs - t0 : 0;
      if (msg.status !== 200) {
        // logMessage('Postagem', `Ordem ** rejected **. Erro: ${msg.error.code} - ${msg.error.msg}`);
        portToCoord.postMessage({
          type: 'orderStatus',
          channel: 'Postagem',
          orderId: currentOrderId || 'unknown',
          status: 'rejected',
          symbol: 'unknown',
          errorCode: msg.error.code,
          errorMsg: msg.error.msg,
          abs,
          t
        });
      } else if (msg.status === 200) {
        logMessage('Postagem', `Ordem aceita: ${msg.result.orderId}`);
        portToCoord.postMessage({
          type: 'orderStatus',
          channel: 'Postagem',
          orderId: currentOrderId || 'unknown',
          status: 'accepted',
          symbol: msg.result.symbol,
          abs,
          t
        });

        const status = msg.result.status.toUpperCase();
        let mappedStatus = status === 'FILLED' ? 'filled' :
                          status === 'NEW' ? 'live' :
                          status === 'EXPIRED' ? 'cancelled' : status.toLowerCase();
        logMessage('Ordens', `Status da ordem: ** ${mappedStatus} **`);
        portToCoord.postMessage({
          type: 'orderStatus',
          channel: 'Ordens',
          orderId: currentOrderId || 'unknown',
          status: mappedStatus,
          symbol: msg.result.symbol,
          avgPx: msg.result.executedQty ? (parseFloat(msg.result.cummulativeQuoteQty) / parseFloat(msg.result.executedQty)).toFixed(2) : null,
          fillSz: msg.result.executedQty || null,
          cancelSource: mappedStatus === 'cancelled' ? 'expired' : null,
          abs,
          t
        });
      }
    }
  });

  ws.on('error', (err) => {
    logMessage('Erro', `Erro no WebSocket: ${err.message}`);
    portToCoord.postMessage({ type: 'error', message: `Erro no WebSocket: ${err.message}` });
  });

  ws.on('close', () => {
    logMessage('Conexão', 'WebSocket desconectado. Tentando reconectar em 5s...');
    setTimeout(connectBinanceWebSocket, 5000);
  });
}

// Variável para armazenar o orderId atual
let currentOrderId;

// Inicialização e recebimento de ordens
parentPort.on('message', (msg) => {
  if (msg.type === 'init') {
    portToCoord = msg.port;
    portToCoord.sentConexoesProntas = false;
    logMessage('Geral', 'Inicializando workerExecBinance.');
    t0 = Date.now();
    connectBinanceWebSocket();
    
    portToCoord.on('message', (portMsg) => {
      // logMessage('Debug', `Mensagem recebida em portToCoord: ${JSON.stringify(portMsg)}`);
      if (portMsg.type === 'executeOrder') {
        try {
          currentOrderId = portMsg.orderId;
          t0 = portMsg.t0 || Date.now();
          // logMessage('Geral', `Recebida ordem (orderId: ${portMsg.orderId}):\n${formatObject(portMsg.order)}`);

          const timestamp = Date.now();
          const mappedOrder = mapOrderToBinance(portMsg.order);
          const orderRequest = {
            id: 2,
            method: 'order.place',
            params: {
              ...mappedOrder,
              timestamp: timestamp
            }
          };

          logMessage('Postagem', `Enviando ordem:\n${formatObject(orderRequest)}`);
          ws.send(JSON.stringify(orderRequest));
        } catch (error) {
          logMessage('Erro', `Erro ao processar executeOrder: ${error.message}`);
          portToCoord.postMessage({ type: 'error', message: `Erro ao processar executeOrder: ${error.message}` });
        }
      } else {
        logMessage('Debug', `Mensagem inesperada em portToCoord: ${JSON.stringify(portMsg)}`);
      }
    });
  } else {
    logMessage('Debug', `Mensagem inesperada recebida no parentPort: ${JSON.stringify(msg)}`);
  }
});
CODIGO BYBIT
"use strict";
const { parentPort, workerData } = require('worker_threads');
const WebSocket = require('ws');
const crypto = require('crypto');

// Cores ANSI para logs
const GREEN = '\x1b[32m';
const BROWN = '\x1b[33m';
const RED = '\x1b[31m';
const RESET = '\x1b[0m';

// Credenciais da Bybit
const { bybitApiKey, bybitApiSecret } = workerData;

// Validação das credenciais
if (!bybitApiKey || !bybitApiSecret) {
  console.error('[workerExecBybit] Erro: Credenciais incompletas no workerData:', workerData);
  throw new Error('Credenciais da Bybit não fornecidas corretamente');
}

// Mapa para correlacionar IDs
const orderIdMap = new Map();

// Contador para numerar mensagens do WebSocket de ordens
let orderMessageCounter = 0;

// Configuração da Bybit
const exchanges = {
  Bybit: {
    tradeWsUrl: 'wss://stream.bybit.com/v5/trade',
    orderWsUrl: 'wss://stream.bybit.com/v5/private',
    formatOrder: (order) => {
      const now = new Date();
      const hhmmssSSS = now.toISOString().slice(11, 23).replace(/[:.]/g, '');
      const timestamp = Date.now().toString();
      let orderType;
      if (order.type === 'limit' && order.timeInForce?.toLowerCase() === 'ioc') {
        orderType = 'Limit';
      } else if (order.type === 'limit' && !order.timeInForce) {
        orderType = 'Limit';
      } else if (order.type === 'market' && !order.timeInForce) {
        orderType = 'Market';
      } else {
        throw new Error(`Tipo inválido: ${order.type}/${order.timeInForce}`);
      }
      const params = {
        category: 'spot',
        symbol: order.symbol,
        side: order.side.charAt(0).toUpperCase() + order.side.slice(1).toLowerCase(),
        orderType,
        isLeverage: '1',
        qty: order.amount,
        timestamp,
      };
      if (orderType === 'Limit') {
        params.price = order.price;
        if (order.timeInForce?.toLowerCase() === 'ioc') {
          params.timeInForce = 'IOC';
        }
      }
      return {
        id: `ORD${hhmmssSSS}`,
        header: {
          "X-BAPI-TIMESTAMP": timestamp,
          "X-BAPI-RECV-WINDOW": "2000"
        },
        op: 'order.create',
        args: [params],
      };
    },
    parseStatus: (msg, channel) => {
      if (channel === 'trade') {
        return msg.retCode === 0 ? 'accepted' : 'rejected';
      } else if (channel === 'orders') {
        return msg.orderStatus === 'Filled' ? 'filled' :
               msg.orderStatus === 'Cancelled' ? 'cancelled' :
               msg.orderStatus === 'New' ? 'live' : 'unknown';
      }
    },
  },
};

// Função para formatar objetos nos logs
function formatObject(obj) {
  return JSON.stringify(obj, null, 2)
    .replace(/"([^"]+)": "([^"]+)"/g, `"$1": ${GREEN}"$2"${RESET}`)
    .replace(/"([^"]+)": (\d+(.\d+)?)/g, `"$1": ${BROWN}$2${RESET}`)
    .replace(/"([^"]+)": null/g, `"$1": null`);
}

// Função de log com timestamps
let t0;
function logMessage(channel, message) {
  const abs = Date.now();
  const t = t0 ? abs - t0 : 0;
  console.log(`[workerExecBybit - ${channel}] [abs=${abs} t=${t}] ${message}`);
}

// Gera assinatura HMAC-SHA256 para autenticação do WebSocket
function generateBybitSignature(expires) {
  const prehashString = `GET/realtime${expires}`;
  return crypto.createHmac('sha256', bybitApiSecret).update(prehashString).digest('hex');
}

let tradeWs;
let orderWs;
let portToCoord;

function startPingIntervalTrade() {
  return setInterval(() => {
    if (tradeWs && tradeWs.readyState === WebSocket.OPEN) {
      tradeWs.ping();
      logMessage('Ping', 'Enviado ping ao Trade WebSocket Bybit.');
    }
  }, 20000);
}

function startPingIntervalOrder() {
  return setInterval(() => {
    if (orderWs && orderWs.readyState === WebSocket.OPEN) {
      orderWs.ping();
      logMessage('Ping', 'Enviado ping ao Order WebSocket Bybit.');
    }
  }, 20000);
}

function clearPingIntervalTrade(intervalId) {
  clearInterval(intervalId);
  logMessage('Ping', 'Intervalo de ping do Trade WebSocket Bybit encerrado.');
}

function clearPingIntervalOrder(intervalId) {
  clearInterval(intervalId);
  logMessage('Ping', 'Intervalo de ping do Order WebSocket Bybit encerrado.');
}

function connectTradeWebSocket() {
  tradeWs = new WebSocket(exchanges.Bybit.tradeWsUrl);
  const pingIntervalTrade = startPingIntervalTrade();
  tradeWs.on('open', () => {
    logMessage('Conexão', 'Conectado ao Trade WebSocket da Bybit.');
    const expires = (Date.now() + 10000).toString();
    const signature = generateBybitSignature(expires);
    tradeWs.send(JSON.stringify({
      op: 'auth',
      args: [bybitApiKey, expires, signature],
    }));
    logMessage('Conexão', `Enviada solicitação de autenticação (Trade):\n${formatObject({ op: 'auth', args: [bybitApiKey, expires, signature] })}`);
  });
  tradeWs.on('message', (data) => {
    let msg;
    try {
      msg = JSON.parse(data);
      logMessage('Debug', `Mensagem parseada (Trade):\n${formatObject(msg)}`);
    } catch (e) {
      logMessage('Erro', `Erro ao parsear mensagem (Trade): ${e.message}`);
      portToCoord.postMessage({ type: 'error', message: `Erro ao parsear mensagem (Trade): ${e.message}` });
      return;
    }
    if (msg.op === 'order.create') {
      const abs = Date.now();
      const t = t0 ? abs - t0 : 0;
      const status = exchanges.Bybit.parseStatus(msg, 'trade');
      const sentOrder = [...orderIdMap.entries()].find(([_, id]) => id.startsWith('ORD'));
      const clientOrderId = sentOrder ? sentOrder[0] : null;
      if (msg.retCode === 0 && msg.data?.orderId) {
        if (clientOrderId) {
          orderIdMap.set(clientOrderId, msg.data.orderId);
          logMessage('Postagem', `Postagem: ${status} para ${msg.data.orderId} (clientOrderId: ${clientOrderId})`);
          portToCoord.postMessage({
            type: 'orderStatus',
            channel: 'Postagem',
            orderId: clientOrderId,
            status,
            instId: msg.data.symbol,
            abs,
            t,
          });
        } else {
          logMessage('Postagem', `Erro: Nenhum clientOrderId encontrado para atualizar com orderId: ${msg.data.orderId}`);
          portToCoord.postMessage({ type: 'error', message: `Nenhum clientOrderId encontrado para orderId: ${msg.data.orderId}` });
        }
      } else {
        logMessage('Postagem', `Postagem rejeitada: ${msg.retMsg}`);
        portToCoord.postMessage({
          type: 'orderStatus',
          channel: 'Postagem',
          orderId: clientOrderId || 'unknown',
          status,
          instId: msg.args?.[0]?.symbol || 'unknown',
          errorCode: msg.retCode,
          errorMsg: msg.retMsg,
          abs,
          t,
        });
      }
    }
  });
  tradeWs.on('ping', () => {
    logMessage('Ping', 'Recebido ping do servidor Bybit (Trade).');
  });
  tradeWs.on('pong', () => {
    logMessage('Ping', 'Recebido pong do WebSocket Bybit (Trade).');
  });
  tradeWs.on('close', () => {
    clearPingIntervalTrade(pingIntervalTrade);
    logMessage('Conexão', 'Trade WebSocket fechado. Reconectando em 5s...');
    setTimeout(connectTradeWebSocket, 5000);
  });
  tradeWs.on('error', (err) => {
    logMessage('Erro', `Erro no Trade WebSocket: ${err.message}`);
    portToCoord.postMessage({ type: 'error', message: `Erro no Trade WebSocket: ${err.message}` });
  });
}

function connectOrderWebSocket() {
  orderWs = new WebSocket(exchanges.Bybit.orderWsUrl);
  const pingIntervalOrder = startPingIntervalOrder();
  orderWs.on('open', () => {
    logMessage('Conexão', 'Conectado ao Order WebSocket da Bybit.');
    const expires = (Date.now() + 10000).toString();
    const signature = generateBybitSignature(expires);
    orderWs.send(JSON.stringify({
      op: 'auth',
      args: [bybitApiKey, expires, signature],
    }));
    logMessage('Conexão', `Enviada solicitação de autenticação (Order):\n${formatObject({ op: 'auth', args: [bybitApiKey, expires, signature] })}`);
  });
  orderWs.on('message', (data) => {
    orderMessageCounter++;
    let msg;
    try {
      msg = JSON.parse(data);
      logMessage('Debug', `Mensagem parseada (Order) [Mensagem ${orderMessageCounter}]:\n${formatObject(msg)}`);
    } catch (e) {
      logMessage('Erro', `Erro ao parsear mensagem (Order): ${e.message}`);
      portToCoord.postMessage({ type: 'error', message: `Erro ao parsear mensagem (Order): ${e.message}` });
      return;
    }
    if (msg.op === 'auth' && msg.success) {
      logMessage('Conexão', 'Autenticado com sucesso no Order WebSocket.');
      orderWs.send(JSON.stringify({
        op: 'subscribe',
        args: ['order'],
      }));
      logMessage('Conexão', 'Enviada solicitação de subscrição ao canal order.');
    }
    if (msg.op === 'subscribe' && msg.success) {
      logMessage('Conexão', 'Subscrito ao canal order com sucesso.');
      portToCoord.postMessage({ type: 'conexoesProntas' });
    }
    if (msg.topic === 'order' && msg.data?.length > 0) {
      const abs = Date.now();
      const t = t0 ? abs - t0 : 0;
      msg.data.forEach((order) => {
        const status = exchanges.Bybit.parseStatus(order, 'orders');
        const clientOrderId = [...orderIdMap.entries()].find(([_, id]) => id === order.orderId)?.[0];
        if (!clientOrderId) {
          logMessage('Ordens', `Nenhum clientOrderId encontrado para orderId: ${order.orderId}`);
          portToCoord.postMessage({ type: 'error', message: `Nenhum clientOrderId encontrado para orderId: ${order.orderId}` });
          return;
        }
        logMessage('Ordens', `Ordem: ${status} para ${order.orderId} (clientOrderId: ${clientOrderId})`);
        portToCoord.postMessage({
          type: 'orderStatus',
          channel: 'Ordens',
          orderId: clientOrderId,
          status,
          instId: order.symbol,
          avgPx: order.avgPrice || null,
          fillSz: order.cumExecQty || null,
          cancelSource: order.rejectReason || null,
          abs,
          t,
        });
      });
    }
  });
  orderWs.on('ping', () => {
    logMessage('Ping', 'Recebido ping do servidor Bybit (Order).');
  });
  orderWs.on('pong', () => {
    logMessage('Ping', 'Recebido pong do WebSocket Bybit (Order).');
  });
  orderWs.on('close', () => {
    clearPingIntervalOrder(pingIntervalOrder);
    logMessage('Conexão', 'Order WebSocket fechado. Reconectando em 5s...');
    setTimeout(connectOrderWebSocket, 5000);
  });
  orderWs.on('error', (err) => {
    logMessage('Erro', `Erro no Order WebSocket: ${err.message}`);
    portToCoord.postMessage({ type: 'error', message: `Erro no Order WebSocket: ${err.message}` });
  });
}

function sendOrder(order, clientOrderId) {
  try {
    const formattedOrder = exchanges.Bybit.formatOrder(order);
    orderIdMap.set(clientOrderId, formattedOrder.id);
    logMessage('Postagem', `Enviando (clientOrderId: ${clientOrderId}):\n${formatObject(formattedOrder)}`);
    tradeWs.send(JSON.stringify(formattedOrder));
    logMessage('Debug', `Ordem enviada para o Trade WebSocket:\n${formatObject(formattedOrder)}`);
  } catch (error) {
    logMessage('Erro', `Erro ao enviar ordem (clientOrderId: ${clientOrderId}): ${error.message}`);
    portToCoord.postMessage({ type: 'error', message: `Erro ao enviar ordem: ${error.message}` });
  }
}

// Inicialização e recebimento de ordens
parentPort.on('message', (msg) => {
  logMessage('Debug', `Mensagem recebida do coordenador no parentPort:\n${formatObject(msg)}`);
  if (msg.type === 'init') {
    portToCoord = msg.port;
    logMessage('Geral', 'Inicializando workerExecBybit.');
    try {
      connectTradeWebSocket();
      connectOrderWebSocket();
    } catch (error) {
      logMessage('Erro', `Erro ao inicializar WebSockets: ${error.message}`);
      portToCoord.postMessage({ type: 'error', message: `Erro ao inicializar WebSockets: ${error.message}` });
    }
    portToCoord.on('message', (portMsg) => {
      logMessage('Debug', `Mensagem recebida em portToCoord:\n${formatObject(portMsg)}`);
      if (portMsg.type === 'executeOrder') {
        try {
          t0 = portMsg.t0 || Date.now();
          logMessage('Geral', `Recebida ordem (clientOrderId: ${portMsg.orderId}):\n${formatObject(portMsg.order)}`);
          sendOrder(portMsg.order, portMsg.orderId);
        } catch (error) {
          logMessage('Erro', `Erro ao processar executeOrder: ${error.message}`);
          portToCoord.postMessage({ type: 'error', message: `Erro ao processar executeOrder: ${error.message}` });
        }
      }
    });
  }
});
CODIGO OKX
"use strict";
const { parentPort, workerData } = require('worker_threads');
const WebSocket = require('ws');
const crypto = require('crypto');

// Cores ANSI para logs
const GREEN = '\x1b[32m';
const BROWN = '\x1b[33m';
const RESET = '\x1b[0m';

// Credenciais da OKX
const { okxApiKey, okxApiSecret, okxPassphrase } = workerData;

// Validação das credenciais
if (!okxApiKey || !okxApiSecret || !okxPassphrase) {
  console.error('[workerExecOKX] Erro: Credenciais incompletas no workerData:', workerData);
  throw new Error('Credenciais da OKX não fornecidas corretamente');
}

// Mapa para correlacionar IDs
const orderIdMap = new Map();

// Configuração da OKX
const exchanges = {
  OKX: {
    wsUrl: 'wss://ws.okx.com:8443/ws/v5/private',
    formatOrder: (order) => {
      const now = new Date();
      const hhmmssSSS = now.toISOString().slice(11, 23).replace(/[:.]/g, '');
      let ordType;
      if (order.type === 'limit' && order.timeInForce?.toLowerCase() === 'ioc') {
        ordType = 'ioc';
      } else if (order.type === 'limit' && !order.timeInForce) {
        ordType = 'limit';
      } else if (order.type === 'market' && !order.timeInForce) {
        ordType = 'market';
      } else {
        throw new Error(`Tipo inválido: ${order.type}/${order.timeInForce}`);
      }
      const orderArgs = {
        instId: order.symbol.replace(/(.+)(USDT|BRL)/, '$1-$2'),
        side: order.side,
        ordType,
        sz: order.amount,
        tdMode: 'cash'
      };
      if (ordType === 'market') orderArgs.tgtCcy = 'base_ccy';
      else if (ordType === 'limit' || ordType === 'ioc') orderArgs.px = order.price;
      return {
        id: `ORD${hhmmssSSS}`,
        op: 'order',
        args: [orderArgs]
      };
    },
    parseStatus: (msg, channel) => {
      if (channel === 'trade') return msg.code === '0' ? 'accepted' : 'rejected';
      else if (channel === 'orders') {
        return msg.state === 'filled' ? 'filled' : msg.state === 'canceled' ? 'cancelled' : 'live';
      }
    }
  }
};

// Função para formatar objetos
function formatObject(obj) {
  return JSON.stringify(obj, null, 2)
    .replace(/"([^"]+)": "([^"]+)"/g, `"$1": ${GREEN}"$2"${RESET}`)
    .replace(/"([^"]+)": (\d+(.\d+)?)/g, `"$1": ${BROWN}$2${RESET}`)
    .replace(/"([^"]+)": null/g, `"$1": null`);
}

// Função de log com timestamps
let t0;
function logMessage(channel, message) {
  const abs = Date.now();
  const t = t0 ? abs - t0 : 0;
  console.log(`[workerExecOKX - ${channel}] [abs=${abs} t=${t}] ${message}`);
}

// Gera assinatura para autenticação
function generateOKXSignature(timestamp, method, path, body) {
  const prehashString = timestamp + method + path + (body || '');
  return crypto.createHmac('sha256', okxApiSecret).update(prehashString).digest('base64');
}

let ws;
let portToCoord;
let pingInterval;

// Conecta ao WebSocket da OKX
function connectOKXWebSocket() {
  ws = new WebSocket(exchanges.OKX.wsUrl);

  ws.on('open', () => {
    //logMessage('Conexão', 'Conectado ao WebSocket da OKX.');
    const timestamp = (Date.now() / 1000).toString();
    const sign = generateOKXSignature(timestamp, 'GET', '/users/self/verify', '');
    ws.send(JSON.stringify({
      op: 'login',
      args: [{ apiKey: okxApiKey, passphrase: okxPassphrase, timestamp, sign }]
    }));
    startPingInterval();
  });

  ws.on('message', (data) => {
    // logMessage('WebSocket', `Mensagem bruta recebida: ${data}`);
    if (data.toString() === 'pong') {
      logMessage('Conexão', 'Recebido pong do WebSocket OKX');
      return;
    }

    let msg;
    try {
      msg = JSON.parse(data);
      //logMessage('Geral', `Mensagem parseada:\n${formatObject(msg)}`);
    } catch (e) {
      logMessage('Erro', `Erro ao parsear mensagem: ${e.message}`);
      portToCoord.postMessage({ type: 'error', message: `Erro ao parsear mensagem: ${e.message}` });
      return;
    }

    if (msg.event === 'login' && msg.code === '0') {
      logMessage('Conexão', 'Autenticado com sucesso.');
      ws.send(JSON.stringify({
        op: 'subscribe',
        args: [
          { channel: 'orders', instType: 'SPOT', instId: 'BTC-USDT' },
          { channel: 'orders', instType: 'SPOT', instId: 'BTC-BRL' },
          { channel: 'orders', instType: 'SPOT', instId: 'USDT-BRL' }
        ]
      }));
    }

    if (msg.event === 'subscribe' && msg.arg?.channel === 'orders') {
      if (msg.arg.instId === 'USDT-BRL') {
        logMessage('Conexão', 'Subscrito ao canal orders com sucesso.');
        portToCoord.postMessage({ type: 'conexoesProntas' });
      }
    }

    if (msg.op === 'order') {
      const abs = Date.now();
      const t = t0 ? abs - t0 : 0;
      const status = exchanges.OKX.parseStatus(msg, 'trade');
      if (msg.data && msg.data.length > 0) {
        const orderData = msg.data[0];
        const clientOrderId = [...orderIdMap.entries()].find(([_, ids]) => ids.id === msg.id)?.[0];
        if (clientOrderId && orderData.ordId) {
          orderIdMap.set(clientOrderId, { id: msg.id, ordId: orderData.ordId });
        }
        logMessage('Postagem', `** ${status} ** ${orderData.instId} - Motivo: ${orderData.sMsg || 'Desconhecido'}`);
        portToCoord.postMessage({
          type: 'orderStatus',
          channel: 'Postagem',
          orderId: clientOrderId,
          status,
          instId: orderData.instId,
          errorCode: msg.code !== '0' ? msg.code : null,
          errorMsg: msg.code !== '0' ? msg.msg : null,
          sMsg: orderData.sMsg || null,
          abs,
          t
        });
      }
    }

    if (msg.arg?.channel === 'orders' && msg.data?.length > 0) {
      const abs = Date.now();
      const t = t0 ? abs - t0 : 0;
      msg.data.forEach(order => {
        const status = exchanges.OKX.parseStatus(order, 'orders');
        const clientOrderId = [...orderIdMap.entries()].find(([_, ids]) => ids.ordId === order.ordId)?.[0];
        logMessage('Ordens', `Ordem: ** ${status} ** para ${order.ordId}`);
        portToCoord.postMessage({
          type: 'orderStatus',
          channel: 'Ordens',
          orderId: clientOrderId,
          status,
          instId: order.instId,
          avgPx: order.avgPx || null,
          fillSz: order.fillSz || null,
          cancelSource: order.cancelSource || null,
          abs,
          t
        });
      });
    }
  });

  ws.on('ping', () => {
    logMessage('Conexão', 'Recebido ping do servidor OKX');
    ws.pong();
  });

  ws.on('pong', () => {
    logMessage('Conexão', 'Recebido pong do WebSocket OKX');
  });

  ws.on('close', () => {
    logMessage('Conexão', 'WebSocket OKX fechado. Reconectando em 5s...');
    clearPingInterval();
    setTimeout(connectOKXWebSocket, 5000);
  });

  ws.on('error', (err) => {
    logMessage('Erro', `Erro no WebSocket: ${err.message}`);
    portToCoord.postMessage({ type: 'error', message: `Erro no WebSocket: ${err.message}` });
  });
}

// Função para manter a conexão viva com pings
function startPingInterval() {
  clearPingInterval();
  pingInterval = setInterval(() => {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.ping();
      logMessage('Geral', 'Enviado ping ao WebSocket OKX');
    }
  }, 15000);
}

function clearPingInterval() {
  if (pingInterval) {
    clearInterval(pingInterval);
    pingInterval = null;
  }
}

// Envia ordem à OKX
function sendOrder(order, clientOrderId) {
  try {
    const formattedOrder = exchanges.OKX.formatOrder(order);
    orderIdMap.set(clientOrderId, { id: formattedOrder.id, ordId: null });
    logMessage('Postagem', `Enviando (clientOrderId: ${clientOrderId}):\n${formatObject(formattedOrder)}`);
    ws.send(JSON.stringify(formattedOrder));
  } catch (error) {
    logMessage('Erro', `Erro ao enviar ordem (clientOrderId: ${clientOrderId}): ${error.message}`);
    portToCoord.postMessage({ type: 'error', message: `Erro ao enviar ordem: ${error.message}` });
  }
}

// Inicialização
parentPort.on('message', (msg) => {
  //logMessage('Debug', `Mensagem recebida do coordenador no parentPort: ${JSON.stringify(msg)}`);
  if (msg.type === 'init') {
    portToCoord = msg.port;
    // logMessage('Geral', 'Inicializando workerExecOKX.');
    // logMessage('Debug', 'Configurando listener para portToCoord');
    try {
      connectOKXWebSocket();
    } catch (error) {
      logMessage('Erro', `Erro ao inicializar WebSocket: ${error.message}`);
      portToCoord.postMessage({ type: 'error', message: `Erro ao inicializar WebSocket: ${error.message}` });
    }
    portToCoord.on('message', (portMsg) => {
      //logMessage('Debug', `Mensagem recebida em portToCoord: ${JSON.stringify(portMsg)}`);
      if (portMsg.type === 'executeOrder') {
        try {
          t0 = portMsg.t0 || Date.now();
          // logMessage('Geral', `Recebida ordem (clientOrderId: ${portMsg.orderId}):\n${formatObject(portMsg.order)}`);
          sendOrder(portMsg.order, portMsg.orderId);
        } catch (error) {
          logMessage('Erro', `Erro ao processar executeOrder: ${error.message}`);
          portToCoord.postMessage({ type: 'error', message: `Erro ao processar executeOrder: ${error.message}` });
        }
      } else {
        logMessage('Debug', `Mensagem inesperada em portToCoord: ${JSON.stringify(portMsg)}`);
      }
    });
  } else {
    logMessage('Debug', `Mensagem inesperada no parentPort: ${JSON.stringify(msg)}`);
  }
});

